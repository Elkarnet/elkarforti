"""
Django settings for elkarforti project.

Generated by 'django-admin startproject' using Django 2.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import sys

import ldap
from django_auth_ldap.config import LDAPSearch, GroupOfNamesType  # https://django-auth-ldap.readthedocs.io/en/latest/example.html
from django.utils.crypto import get_random_string
sys.path.append(os.path.abspath("/data/web/"))
#from secret_key import *

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


if 'LDAP_BIND_DN' in os.environ:
    # Running the Docker image

    AUTH_LDAP_SERVER_URI = os.environ['LDAP_SERVER_URI'] 
    AUTH_LDAP_BIND_DN = os.environ['LDAP_BIND_DN'] 
    AUTH_LDAP_BIND_PASSWORD = os.environ['LDAP_BIND_PASSWORD']

    AUTH_LDAP_USER_SEARCH = LDAPSearch(
         os.environ['LDAP_USER_SEARCH_OU'], ldap.SCOPE_SUBTREE, os.environ['LDAP_USER_SEARCH_FILTER']
    )

    # Set up the basic group parameters.
    AUTH_LDAP_GROUP_SEARCH = LDAPSearch(
        os.environ['LDAP_GROUP_SEARCH'],
        ldap.SCOPE_SUBTREE,
       "(objectClass=groupOfNames)",
    )

    # Simple group restrictions
    AUTH_LDAP_REQUIRE_GROUP = os.environ['LDAP_REQUIRE_GROUP']

    AUTH_LDAP_USER_FLAGS_BY_GROUP = {
        "is_active": os.environ['LDAP_FLAG_IS_ACTIVE'],
        "is_staff": os.environ['LDAP_FLAG_IS_STAFF'],
    }


    # Database
    # https://docs.djangoproject.com/en/2.2/ref/settings/#databases

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.environ['DB_PATH'],
        }
    }

    ALLOWED_HOSTS = [os.environ['ALLOWED_HOSTS'], '127.0.0.1']



else:
    AUTH_LDAP_SERVER_URI = "ldap://192.168.1.1:389"
    AUTH_LDAP_BIND_DN = "cn=binduser,cn=Users,dc=example,dc=com"
    AUTH_LDAP_BIND_PASSWORD = "bindpassword"

    AUTH_LDAP_USER_SEARCH = LDAPSearch(
        "ou=Users,dc=example,dc=com", ldap.SCOPE_SUBTREE, "(&(objectClass=*)(samaccountname=%(user)s))"
    )

    # Set up the basic group parameters.
    AUTH_LDAP_GROUP_SEARCH = LDAPSearch(
        "ou=Groups,dc=example,dc=com",
        ldap.SCOPE_SUBTREE,
        "(objectClass=groupOfNames)",
    )



    # Simple group restrictions
    AUTH_LDAP_REQUIRE_GROUP = "cn=FortiAccessGroup,ou=Groups,dc=example,dc=com"

    AUTH_LDAP_USER_FLAGS_BY_GROUP = {
        "is_active": "cn=FortiAccessGroup,ou=Groups,dc=example,dc=com",
        "is_staff": "cn=FortiAccessGroup,ou=Groups,dc=example,dc=com",
    }

    # Database
    # https://docs.djangoproject.com/en/2.2/ref/settings/#databases

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }

    ALLOWED_HOSTS = []




AUTH_LDAP_GROUP_TYPE = GroupOfNamesType(name_attr="cn")


AUTH_LDAP_ALWAYS_UPDATE_USER = True
AUTH_LDAP_USER_ATTR_MAP = {
    "username": "sAMAccountName",
    "first_name": "givenName",
    "last_name": "sn",
    "email": "mail",
}

AUTH_LDAP_FIND_GROUP_PERMS = True




# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

try:
    from secret_key import SECRET_KEY
except ImportError:
    SETTINGS_DIR = os.path.abspath(os.path.dirname(__file__))

    chars = 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)'
    file_out = open("/data/web/secret_key.py", "w")
    print("-----------------------------------------------")
    secret=get_random_string(50, chars)
    file_out.write("SECRET_KEY='"+secret+"'")
    file_out.close()
    from secret_key import SECRET_KEY


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True


# Application definition

INSTALLED_APPS = [
    'groupaccess.apps.GroupaccessConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'elkarforti.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'elkarforti.wsgi.application'


AUTHENTICATION_BACKENDS = [
    "django_auth_ldap.backend.LDAPBackend",
    "django.contrib.auth.backends.ModelBackend",
]



# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Madrid'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
LOGIN_REDIRECT_URL = '/groupaccess/'

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"
